List of smaller ideas/todos
===========================

Basic AdvancedSolver optimization:
- crossover/mutation based on position instead of fitness (makes the algorithm independent of the fitness function implementation)
- Span/DistanceLookup dictonaries as arrays for speedup (-> FastDistanceLookup)
- final simple hill climbing (switch single genes for a better fitness until no single gene can be switched for a better fitness)?
- better way of calculating weighting in csvs
- GeneticAlgorithm.randomBitArray() flipped bits dependent upon Total points (larger tree -> more bits set)?
- how to handle csvs exceeding the target value? (curently they are capped at the target value) (AdvancedSolver.CalcCsv())
- optimize AdvancedSolver.FitnessFunction()
- optimize included nodes (AdvancedSolver.IncludeNode()): vicinity related steiner node selection, exclude nodes with stats that are "too far away" to be useful
- tweak AdvancedSolver.GaParameters

PseudoAttributes related:
- make sure Data/PseudoAttributes is included in install packages

AdvancedSolver UI improvements:
- "Popular" group for attribute combobox
- Tooltips for deactivated Tabs
- pressing Enter when adding new PseudoAttributeConstraint should add it
- more intuitive control instead of the DataGrid: AttrConstraintGrid like PseudoConstraintGrid is done
- Float Attributes generated by "load from tree" are displayed unrounded
- reset button for the Tree Generator window
- substring match searchable ComboBox for Attributes (something like the poe.trade comboboxes)
- proper delete-row-button-icon
- inform the user that keystones must be checked if they should be included (can lead to unconnected trees if notables behind keystones are checked)

Miscellaneous:
- more/updated Unit Tests (e.g. binary search in WeightedSampling)
- ControllerViewModel: get best result text from Solver or somewhere else since it is somewhat solver dependant
- Hardcoded lists/dictionaries in AdvancedSolverViewModel to extern files
- UI texts localized
- Clean up / Commentation

Bigger things (best to discuss these in GitHub issues)
=============

Extend advanced generator with stats like dps, life, ... (tree + gear):
- Compute.cs refactoring
Random ideas to support the UI:
- tab in the normal UI to switch between stats imported from gear and manually typed stats
- bandit support
- some way to display different skill gems, support gems (maybe), weapon types

Automatically generate constraints -> automated generator

General ideas:
- alternative solutions
- base class optimized, not specified by the user
- load base stat requirements from gear
