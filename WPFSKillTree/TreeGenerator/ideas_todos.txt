List of smaller ideas/todos
===========================

Basic AdvancedSolver optimization:
- crossover/mutation based on position instead of fitness (makes the algorithm independent of the fitness function implementation)
- final simple hill climbing (switch single genes for a better fitness until no single gene can be switched for a better fitness)?
- better way of calculating weighting in csvs
- GeneticAlgorithm.randomBitArray() flipped bits dependent upon Total points (larger tree -> more bits set)?
- optimize AdvancedSolver.FitnessFunction()
- tweak AdvancedSolver.GaParameters

AdvancedSolver UI improvements:
- more intuitive control instead of the DataGrid: AttrConstraintGrid like PseudoConstraintGrid is done
- "Popular" group for attribute combobox
- Float Attributes generated by "load from tree" are displayed unrounded
- reset button for the Tree Generator window
- substring match searchable ComboBox for Attributes (something like the poe.trade comboboxes)
- proper delete-row-button-icon
- inform the user that keystones must be checked if they should be included (can lead to unconnected trees if notables behind keystones are checked)

Miscellaneous:
- move Documentation from old Steiner files to new and delete old files
- more/updated Unit Tests (e.g. binary search in WeightedSampling)
- Hardcoded lists/dictionaries in AdvancedSolverViewModel to extern files
- UI texts localized
- Clean up / Commentation
- fix memory leaks

Bigger things (best to discuss these in GitHub issues)
=============

Extend advanced generator with stats like dps, life, ... (tree + gear):
- Compute.cs refactoring
Random ideas to support the UI:
- tab in the normal UI to switch between stats imported from gear and manually typed stats
- bandit support
- some way to display different skill gems, support gems (maybe), weapon types

Automatically generate constraints -> automated generator

General ideas:
- alternative solutions
- base class optimized, not specified by the user
- load base stat requirements from gear
